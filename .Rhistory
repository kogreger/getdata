GTD.Export <- read.csv("~/Downloads/GTD-Export.csv")
View(GTD.Export)
min(GTD.Export$DATE)
gtd <- GTD.Export
view(gtd)
View(gtd)
View(GTD.Export)
range(gtd$DATE)
range(gtd$DATE, na.rm=true)
range(gtd$DATE, na.rm=T)
describe.by(gtd, gtd$CITY)
library(psych)
describe.by(gtd, gtd$CITY)
# load necessary libraries
library(ggplot2)
library(scales)
library(reshape)
# load and massage data
tripchain <- read.csv("~/Documents/University of Tsukuba/PhD Thesis/data/trip_chain_matrix.csv", sep=";")
tripchain.m <- melt(tripchain)
tripchain.m$from <- factor(tripchain.m$from, levels=tripchain$from)
tripchain.m[order(tripchain.m$from, decreasing = T),]
# create and display heatmap
(p <- ggplot(tripchain.m, aes(variable, from)) + geom_tile(aes(fill = value), colour = "white") + scale_fill_gradient(low = "blue", high = "red"))
base_size <- 12
p <- p + theme_bw(base_size = base_size) + labs(x = "to", y = "from") + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + opts(legend.position = "none", axis.ticks = theme_blank(), axis.text.x = theme_text(size = base_size, angle = 90, hjust = 1, color = "black"), axis.text.y = theme_text(size = base_size, hjust = 0, color = "black"))
p <- p + opts(axis.title.x = theme_text(face="bold", size=12, angle=0, hjust=0.5))
p <- p + opts(axis.title.y = theme_text(face="bold", size=12, angle=90, vjust=0.5))
print(p)
ggsave(p, file = "tripchain_heatmap.png", path = "~/Documents/University of Tsukuba/PhD Thesis/img/", width = 166, height = 80, units = "mm", dpi = 300)
ggsave(p, file = "tripchain_heatmap.png", path = "~/Documents/University of Tsukuba/PhD Thesis/img/", width = 166, height = 100, units = "mm", dpi = 300)
tripchain <- read.csv("~/Documents/University of Tsukuba/PhD Thesis/data/trip_chain_matrix.csv", sep=";")
tripchain.m <- melt(tripchain)
tripchain.m$from <- factor(tripchain.m$from, levels=tripchain$from)
tripchain.m[order(tripchain.m$from, decreasing = T),]
# create and display heatmap
(p <- ggplot(tripchain.m, aes(variable, from)) + geom_tile(aes(fill = value), colour = "white") + scale_fill_gradient(low = "blue", high = "red"))
base_size <- 12
p <- p + theme_bw(base_size = base_size) + labs(x = "to", y = "from") + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + opts(legend.position = "none", axis.ticks = theme_blank(), axis.text.x = theme_text(size = base_size, angle = 90, hjust = 1, color = "black"), axis.text.y = theme_text(size = base_size, hjust = 0, color = "black"))
p <- p + opts(axis.title.x = theme_text(face="bold", size=12, angle=0, hjust=0.5))
p <- p + opts(axis.title.y = theme_text(face="bold", size=12, angle=90, vjust=0.5))
print(p)
ggsave(p, file = "tripchain_heatmap.png", path = "~/Documents/University of Tsukuba/PhD Thesis/img/", width = 166, height = 100, units = "mm", dpi = 300)
dat = read.csv("/Volumes/WD_8TB/Data_Transfer/murayama.csv", header = TRUE)
dat = read.csv("/Volume/WD_8TB/Data_Transfer/murayama.csv", header = TRUE)
dat = read.csv("/Volume/WD_8TB/Data_Transfer/murayama.txt", header = TRUE)
dat = read.csv("/Volumes/WD_8TB/Data_Transfer/murayama.txt", header = TRUE)
dat
head(dat)
dcast(dat, age ~ work)
require(reshape2)
dcast(dat, age ~ work)
require(reshape2)
dat = read.csv("/Volumes/WD_8TB/Data_Transfer/pflow_age_work.txt", header = TRUE)
dcast(dat, age ~ work)
View(dat)
table = dcast(dat, age ~ work)
View(table)
write.csv(table, "/Volumes/WD_8TB/Data_Transfer/pflow_age_work_table.csv")
install.packages("ggplot2")
install.packages(c("class", "digest", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "psych", "rgl", "rpart", "sm", "spatial", "survival"))
df <- read.csv(file="/Volumes/WD_8TB/Data_Transfer/raillink_usage.csv",head=TRUE,sep=",")
View(df)
dcast(df, raillink ~ phour)
require(reshape2)
dcast(df, raillink ~ phour)
newdf <- dcast(df, raillink ~ phour)
View(newdf)
write.table(newdf, "/Volumes/WD_8TB/Data_Transfer/raillink_usage2.csv", sep=",")
write.table(newdf, "/Volumes/WD_8TB/Data_Transfer/raillink_usage2.csv", sep=",", row.names=FALSE)
require(reshape2)
df <- read.csv(file="/Volumes/WD_8TB/Data_Transfer/raillink_usage.csv", head=TRUE, sep=",")
newdf <- dcast(df, raillink ~ phour)
write.table(newdf, "/Volumes/WD_8TB/Data_Transfer/raillink_usage2.csv", sep=",", row.names=FALSE)
require(reshape2)
df <- read.csv(file="/Volumes/WD_8TB/Data_Transfer/raillink_usage22.csv", head=TRUE, sep=",")
newdf <- dcast(df, raillink ~ phour)
write.table(newdf, "/Volumes/WD_8TB/Data_Transfer/raillink_usage222.csv", sep=",", row.names=FALSE)
require(reshape2)
df <- read.csv(file="/Volumes/WD_8TB/Data_Transfer/raillink_usage.csv", head=TRUE, sep=",")
newdf <- dcast(df, raillink ~ phour)
View(newdf)
write.table(newdf, "/Volumes/WD_8TB/Data_Transfer/raillink_usage2.csv", sep=",", row.names=FALSE)
require(reshape2)
df <- read.csv(file="/Volumes/WD_8TB/Data_Transfer/vuln_sbp.txt", head=TRUE, sep=";")
View(df)
df <- read.csv(file="/Volumes/WD_8TB/Data_Transfer/vuln_sbp.txt", head=TRUE, sep=";")
View(df)
newdf <- dcast(df, level ~ hour)
View(newdf)
write.table(newdf, "/Volumes/WD_8TB/Data_Transfer/vuln_sbp2.csv", sep=",", row.names=FALSE)
require(reshape2)
df <- read.csv(file="/Volumes/WD_8TB/Data_Transfer/vuln_inst.txt", head=TRUE, sep=";")
View(df)
newdf <- dcast(df, type + level ~ hour)
View(newdf)
write.table(newdf, "/Volumes/WD_8TB/Data_Transfer/vuln_inst2.csv", sep=",", row.names=FALSE)
require(reshape2)
df <- read.csv(file="/Volumes/WD_8TB/Data_Transfer/vuln_tsu.txt", head=TRUE, sep=";")
newdf <- dcast(df, level ~ hour)
View(newdf)
write.table(newdf, "/Volumes/WD_8TB/Data_Transfer/vuln_tsu2.csv", sep=",", row.names=FALSE)
df <- read.csv(file="/Volumes/WD_8TB/Data_Transfer/vuln_rli.txt", head=TRUE, sep=";")
View(df)
newdf <- dcast(df, level ~ hour)
write.table(newdf, "/Volumes/WD_8TB/Data_Transfer/vuln_rli2.csv", sep=",", row.names=FALSE)
require(reshape2)
df <- read.csv(file="/Volumes/WD_8TB/Data_Transfer/vuln_btw.txt", head=TRUE, sep=";")
newdf <- dcast(df, level ~ hour)
write.table(newdf, "/Volumes/WD_8TB/Data_Transfer/vuln_btw2.csv", sep=",", row.names=FALSE)
View(newdf)
library(ggplot2)
data(diamonds)
summary
summary(diamonds)
str(diamonds)
levels(diamonds$clarity)
levels(diamonds$color)
diamonds$color
?diamonds
qplot(data = diamonds, x = price)
summary(diamonds)
summary(diamonds$price)
subset(diamonds, price < 5000)
lt5000 <- subset(diamonds, price < 5000)
lt500 <- subset(diamonds, price < 500)
lt250 <- subset(diamonds, price < 250)
gt15000 <- subset(diamonds, price >= 15000)
qplot(data = diamonds, x = price)
qplot(data = diamonds, x = price, xlim = c(0,2500))
qplot(data = diamonds, x = price, xlim = c(500,1000))
qplot(data = diamonds, x = price, xlim = c(500,1000), binwidth = 1)
qplot(data = diamonds, x = price, xlim = c(0,2000), binwidth = 1)
qplot(data = diamonds, x = price) +
facet_wrap(~ color)
qplot(data = diamonds, x = price) +
facet_wrap(~ cut)
by(diamonds, cut, summary)
by(diamonds, cut, str)
?by
str(diamonds)
by(diamonds, diamonds$cut, str)
by(diamonds, diamonds$cut, summary)
by(diamonds$price, diamonds$cut, summary)
by(diamonds$price, diamonds$cut, max)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
?facet_wrap
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = free)
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = "free"")
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = "free")
qplot(x = price, y = carat, data = diamonds) + facet_wrap(~cut, scales = "free")
qplot(x = price / carat, data = diamonds) + facet_wrap(~cut, scales = "free")
qplot(x = price / carat, data = diamonds) + facet_wrap(~cut, scales = "free") + scale_x_log10()
?qplot
qplot(data = diamonds, x = price, geom = "boxplot") + facet_wrap(~ cut)
qplot(data = diamonds, x = cut, y = price, geom = "boxplot")
qplot(data = diamonds, x = clarity, y = price, geom = "boxplot")
qplot(data = diamonds, x = color, y = price, geom = "boxplot")
str(subset(diamonds, color == D))
str(subset(diamonds, color = D))
str(subset(diamonds$price, color = D))
str(subset(diamonds, color = D))
summary(subset(diamonds, color = D))
summary(subset(diamonds$price, color = D))
summary(subset(diamonds, color = D))
summary(subset(diamonds, color = D)$price)
IQR(subset(diamonds, color = D)$price)
summary(subset(diamonds, color = J)$price)
IQR(subset(diamonds, color = J)$price)
?diamonds
summary(subset(diamonds, color == J)$price)
?IQR
by(diamonds$price, diamonds$color, summary)
by(diamonds$price, diamonds$color, IQR)
qplot(data = diamonds, x = price, y = carat) + facet_wrap(~ color)
qplot(carat,data=diamonds,geom="freqpoly",binwidth=0.01,color=I('black'))+scale_x_continuous(limit=c(0,5),breaks=seq(0,5,0.1))+scale_y_continuous(breaks=seq(0,10000,1000))
dhk09_0000 <- read.table("/Volumes/WD_8TB/Data_Transfer/pflow/dhk09/09dhk_0000.csv", sep = ",", header = FALSE)
head(dhk09_0000)
object.size(dhk09_0000)
mnl96_0000 <- read.table("/Volumes/WD_8TB/Data_Transfer/pflow/mnl96/mnl96_0000.csv", sep = ",", header = FALSE)
setwd("~/Documents/Coursera/Data Science Specialization/Getting and Cleaning Data/getdata")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
destfile = "gdp.csv")
gdp <- read.csv("gdp.csv", skip = 5, header = F)
keep = c(1, 2, 4, 5)
gdp <- gdp[keep]
names(gdp) <- c("code", "rank", "name", "gdp")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",
destfile = "education.csv")
edu <- read.csv("education.csv")
df <- merge(gdp, edu, by.x = "code", by.y = "CountryCode")
nrow(df)
complete.cases(df)
sum(complete.cases(df))
table(gdp$rank)
sum(gdp$rank)
str(gdp$rank)
gdp$rank != as.numeric(gdp$rank)
gdp$rank != as.character(as.numeric(gdp$rank))
complete.cases(gdp$rank)
complete.cases(gdp)
grep("[:numeric:]", gdp$rank)
grep("[:digit:]", gdp$rank)
grep("[:digit:]?", gdp$rank)
gdp2 <- gdp[grep("[:digit:]?", gdp$rank), ]
gdp2$rank
grep("^[:digit:]?$", gdp$rank)
grep("^[:digit:]+$", gdp$rank)
grep("^[:digit:]*$", gdp$rank)
grep("^([:digit:])+$", gdp$rank)
grep("^([:digit:])?$", gdp$rank)
grep("^([:digit:]){1,3}$", gdp$rank)
grep("^[:digit:]{1,3}$", gdp$rank)
grep("^[:digit:]$", gdp$rank)
grep("^[:digit:]*$", gdp$rank)
grep("[:digit:]*$", gdp$rank)
gdp$rank[326]
grep("[:digit:]+$", gdp$rank)
grep("([:digit:]+)$", gdp$rank)
grep("([0-9]+)$", gdp$rank)
grep("^([0-9]+)$", gdp$rank)
gdp2 <- gdp[grep("^([0-9]+)$", gdp$rank), ]
nrow(gdp2)
gdp <- gdp[grep("^([0-9]+)$", gdp$rank), ]
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",
destfile = "education.csv")
edu <- read.csv("education.csv")
df <- merge(gdp, edu, by.x = "code", by.y = "CountryCode")
nrow(df)
df <- sort(df$rank, decreasing = TRUE)
df[13]
df[13$name]
df[13, name]
df$name[13]
df[13, name]
df[13, df$name]
head(df, 13)
df <- merge(gdp, edu, by.x = "code", by.y = "CountryCode")
library(plyr)
arrange(df, desc(rank))
df <- arrange(df, desc(rank))
head(df, 13)
df[13, c(rank, name)]
names(df)
head(df)
head(df, 15)
df[13, c("rank", "name")]
nrow(df)
tail(df, 2)
df$rank <- as.numeric(df$rank)
df <- arrange(df, desc(rank))
df[13, c("rank", "name")]
tail(df, 2)
df <- merge(gdp, edu, by.x = "code", by.y = "CountryCode")
df$rank <- as.numeric(df$rank)
df <- arrange(df, desc(rank))
df[13, c("rank", "name")]
tail(df, 2)
df[rank == 1, ]
df["rank" == 1, ]
df["rank" == 1]
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
destfile = "gdp.csv")
gdp <- read.csv("gdp.csv", skip = 5, header = F)
keep = c(1, 2, 4, 5)
gdp <- gdp[keep]
names(gdp) <- c("code", "rank", "name", "gdp")
gdp <- gdp[grep("^([0-9]+)$", gdp$rank), ]
df$rank <- as.numeric(df$rank)
str(gdp)
df$rank <- as.numeric(as.character(df$rank))
str(gdp)
df$rank <- as.numeric(levels(df$rank))
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
destfile = "gdp.csv")
gdp <- read.csv("gdp.csv", skip = 5, header = F)
#remove unnecessary columns
keep = c(1, 2, 4, 5)
gdp <- gdp[keep]
# provide meaningful column names
names(gdp) <- c("code", "rank", "name", "gdp")
# remove rows with non-numeric rank
gdp <- gdp[grep("^([0-9]+)$", gdp$rank), ]
df$rank <- as.numeric(levels(df$rank))
str(gdp)
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
destfile = "gdp.csv")
gdp <- read.csv("gdp.csv", skip = 5, header = F)
#remove unnecessary columns
keep = c(1, 2, 4, 5)
gdp <- gdp[keep]
# provide meaningful column names
names(gdp) <- c("code", "rank", "name", "gdp")
# remove rows with non-numeric rank
str(gdp)
df$rank <- as.character(df$rank)
str(gdp)
gdp <- gdp[grep("^([0-9]+)$", gdp$rank), ]
gdp$rank <- as.numeric(levels(gdp$rank))
str(gdp)
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",
destfile = "gdp.csv")
gdp <- read.csv("gdp.csv", skip = 5, header = F)
#remove unnecessary columns
keep = c(1, 2, 4, 5)
gdp <- gdp[keep]
# provide meaningful column names
names(gdp) <- c("code", "rank", "name", "gdp")
# remove rows with non-numeric rank
gdp$rank <- as.character(gdp$rank)
str(gdp)
gdp <- gdp[grep("^([0-9]+)$", gdp$rank), ]
gdp$rank <- as.numeric(gdp$rank)
str(gdp)
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",
destfile = "education.csv")
edu <- read.csv("education.csv")
df <- merge(gdp, edu, by.x = "code", by.y = "CountryCode")
nrow(df)
df <- arrange(df, desc(rank))
df[13, c("rank", "name")]
tail(df, 2)
df[13, c("rank", "name")]
?by
names(df)
table(df$Income.Group)
by(df, IncomeGroup, mean, rank)
by(df, "IncomeGroup", mean, rank)
by(df, df$IncomeGroup, mean, rank)
by(df, df$IncomeGroup, mean)
by(df, df[, "IncomeGroup"], mean)
with(df, by(df, IncomeGroup, summary))
taaply(df$rank, df$IncomeGroup, mean)
tapply(df$rank, df$IncomeGroup, mean)
tapply(df$rank, df$IncomeGroup, sum)
split(df$rank, df$IncomeGroup)
length(df$rank)
length(df$Income.Group)
split(df$rank, df$Income.Group)
tapply(df$rank, df$Income.Group, mean)
tapply(df$rank, df$Income.Group, mean)
df$group <- cut2(df$rank, g = 5)
install.packages("Hmisc")
library(Hmisc)
df$group <- cut2(df$rank, g = 5)
table(df$group)
xtabs(group ~ Income.Group, data = df)
table(df$Income.Group)
table(df$group)
is.factor(df$group)
is.factor(df$Income.Group)
data(UCBAdmissions)
xtabs(group + Income.Group, data = df)
?xtabs
xtabs( ~ group + Income.Group, data = df)
